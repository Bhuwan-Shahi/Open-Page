// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication and customer management
model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  phone     String   @unique
  password  String?  // Optional for OTP-based auth
  role      UserRole @default(USER)
  isActive  Boolean  @default(true)
  isVerified Boolean @default(false)
  
  // OTP fields
  otpCode      String?
  otpExpiresAt DateTime?
  otpAttempts  Int       @default(0)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders    Order[]
  reviews   Review[]
  cartItems CartItem[]
  paymentScreenshots PaymentScreenshot[]
  notifications Notification[]
  bookAccess UserBookAccess[]

  @@map("users")
}

enum UserRole {
  USER
  ADMIN
}

// Book model for storing book information
model Book {
  id          String   @id @default(cuid())
  title       String
  author      String
  description String?
  price       Float
  coverImage  String?
  pdfUrl      String   // Path to the PDF file
  category    String?
  isbn        String?  @unique
  pages       Int?
  language    String   @default("English")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  orderItems  OrderItem[]
  reviews     Review[]
  cartItems   CartItem[]
  userAccess  UserBookAccess[]
  
  @@map("books")
}

// Order model for purchase tracking
// Order model for purchases
model Order {
  id                String      @id @default(cuid())
  userId            String
  total             Float
  status            OrderStatus @default(PENDING)
  expiresAt         DateTime?   // For payment timeout
  screenshotUploaded Boolean    @default(false)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  // Relations
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems        OrderItem[]
  paymentScreenshots PaymentScreenshot[]
  userBookAccess    UserBookAccess[]
  
  @@map("orders")
}

// OrderItem model for individual books in an order
model OrderItem {
  id       String @id @default(cuid())
  orderId  String
  bookId   String
  quantity Int    @default(1)
  price    Float  // Price at time of purchase
  
  // Relations
  order    Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  book     Book   @relation(fields: [bookId], references: [id])
  
  @@unique([orderId, bookId])
  @@map("order_items")
}

// Review model for book reviews
model Review {
  id        String   @id @default(cuid())
  userId    String
  bookId    String
  rating    Int      // 1-5 stars
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  
  @@unique([userId, bookId]) // One review per user per book
  @@map("reviews")
}

// Cart Item model for shopping cart
model CartItem {
  id        String   @id @default(cuid())
  userId    String
  bookId    String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  
  @@unique([userId, bookId]) // One item per user per book in cart
  @@map("cart_items")
}

// Payment Screenshot model for payment verification
model PaymentScreenshot {
  id           String   @id @default(cuid())
  orderId      String
  userId       String
  filename     String
  originalName String
  filePath     String
  verified     Boolean  @default(false)
  verifiedBy   String?  // Admin who verified
  verifiedAt   DateTime?
  uploadedAt   DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  order        Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("payment_screenshots")
}

// Notification model for user notifications
model Notification {
  id        String             @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  data      Json?              // Additional data like orderId, bookId, etc.
  read      Boolean            @default(false)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  
  // Relations
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notifications")
}

// UserBookAccess model to track book ownership and access
model UserBookAccess {
  id           String   @id @default(cuid())
  userId       String
  bookId       String
  orderId      String   // Reference to the order that granted access
  accessType   AccessType @default(PURCHASED)
  grantedAt    DateTime @default(now())
  expiresAt    DateTime? // For time-limited access (null for lifetime)
  isActive     Boolean  @default(true)
  downloadCount Int     @default(0)
  lastAccessed DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  book         Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  order        Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  @@unique([userId, bookId]) // One access record per user per book
  @@map("user_book_access")
}

// Enums
enum Role {
  ADMIN
  CUSTOMER
}

enum OrderStatus {
  PENDING
  PAID
  COMPLETED
  CANCELLED
}

enum NotificationType {
  PAYMENT_VERIFIED
  ORDER_COMPLETED
  BOOK_AVAILABLE
  PAYMENT_REJECTED
  SYSTEM_MESSAGE
}

enum AccessType {
  PURCHASED
  GIFTED
  TRIAL
  SUBSCRIPTION
}
